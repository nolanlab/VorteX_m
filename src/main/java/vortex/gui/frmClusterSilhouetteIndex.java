/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * frmEnrichment.java
 *
 * Created on 16-Dec-2009, 13:15:52
 */
package vortex.gui;

import executionslave.Task;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableModel;
import samusik.glasscmp.GlassFrame;
import clustering.ClusterSet;
import clustering.Dataset;
import clustering.DistanceMeasure;
import util.ClusterSetValidationMeasureCollection;
import util.ClusterSetValidationFactory;
import util.ClusterSetValidationMeasure;
import clustering.DistanceMatrix;
import vortex.gridengine.GridEngine;
import vortex.gridengine.TaskCompletionListner;
import util.logger;

/**
 *
 * @author Nikolay
 */
public class frmClusterSilhouetteIndex extends GlassFrame {

    private static final long serialVersionUID = 1L;
    private ValidationComputer computer;
    Dataset annDS;
    private ClusterSet[] css;

    /**
     * Creates new form frmEnrichment
     */
    @SuppressWarnings("unchecked")
    public frmClusterSilhouetteIndex(ClusterSet[] css) {
        initComponents();
        Class[] c = DistanceMeasure.getAvailableSubclasses();
        for (Class c1 : c) {
            ((DefaultComboBoxModel) cmbDistanceMeasure.getModel()).addElement(new vortex.util.ClassWrapper(c1));
        }
        if (css.length == 0) {
            throw new IllegalArgumentException("Provided Cluster Set list is empty");
        }
        this.css = css;
    }

    /*TODO
     * - adding annotations to the list
     * - computing annotations for selected clusters
     * - call insurance
     */
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        cmdComputeSilhouette = new samusik.glasscmp.GlassButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        cmbDistanceMeasure = new samusik.glasscmp.GlassComboBox();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Average Cluster Silhouette Index");
        setAlwaysOnTop(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel1.setBackground(getBackground());
        jPanel1.setLayout(new java.awt.GridBagLayout());

        cmdComputeSilhouette.setText("Compute");
        cmdComputeSilhouette.setMaximumSize(new java.awt.Dimension(100, 28));
        cmdComputeSilhouette.setMinimumSize(new java.awt.Dimension(100, 28));
        cmdComputeSilhouette.setPreferredSize(new java.awt.Dimension(100, 28));
        cmdComputeSilhouette.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdComputeSilhouetteActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(cmdComputeSilhouette, gridBagConstraints);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cluster Set", "Average cluster Silhouette Index"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jScrollPane1, gridBagConstraints);

        cmbDistanceMeasure.setMinimumSize(new java.awt.Dimension(34, 28));
        cmbDistanceMeasure.setPreferredSize(new java.awt.Dimension(34, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel1.add(cmbDistanceMeasure, gridBagConstraints);

        jLabel1.setText("Distance measure:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(jLabel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jPanel1, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmdComputeSilhouetteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdComputeSilhouetteActionPerformed
        try {
            Class<? extends DistanceMeasure> c = ((vortex.util.ClassWrapper) cmbDistanceMeasure.getSelectedItem()).item;

            DistanceMeasure dm = c.getConstructor().newInstance();

            if (computer != null) {
                computer.cancel(true);
            }
            //DistanceMatrix dmtx = new DistanceMatrix(css[0].getDataset(), dm);

            computer = new ValidationComputer(css, (DefaultTableModel) jTable1.getModel(), new ClusterSetValidationMeasureCollection.ClusterSilhouetteIndexFactory(dm));
            computer.execute();
            cmdComputeSilhouette.setText("Computing...");
            cmdComputeSilhouette.setEnabled(false);
        } catch (Exception e) {
            logger.showException(e);
        }
    }//GEN-LAST:event_cmdComputeSilhouetteActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (computer != null) {
            computer.cancel(true);
        }
    }//GEN-LAST:event_formWindowClosing

    private class ValidationComputer extends SwingWorker<DefaultTableModel, ClusterSetValidationMeasure> {

        private ClusterSet[] css;
        private ClusterSetValidationFactory factory;
        private DefaultTableModel dtm;

        @Override
        protected void done() {
            factory = null;
        }

        public ValidationComputer(ClusterSet[] css, DefaultTableModel dtm, ClusterSetValidationFactory factory) {
            this.css = css;
            this.factory = factory;
            this.dtm = dtm;
        }
        Task<ClusterSetValidationMeasure>[] tasks = null;

        @Override
        protected DefaultTableModel doInBackground() throws Exception {

            ClusterSetValidationMeasure[] arr = new ClusterSetValidationMeasure[css.length];

            tasks = new Task[arr.length];

            for (int i = 0; i < tasks.length; i++) {
                final int k = i;
                tasks[i] = new Task<ClusterSetValidationMeasure>() {
                    private boolean cancelled;

                    @Override
                    public ClusterSetValidationMeasure execute() {
                        if (cancelled) {
                            return null;
                        }
                        return factory.getClusterSetValidationMeasure(css[k]);
                    }

                    @Override
                    public void cancel() {
                        this.cancelled = true;
                    }
                };
            }

            Integer id = GridEngine.getInstance().submitBatch(tasks, arr, new TaskCompletionListner<ClusterSetValidationMeasure>() {
                @Override
                public void taskCompleted(ClusterSetValidationMeasure result, int posInRetArray) {
                    if (isCancelled()) {
                        for (Task t : tasks) {
                            t.cancel();
                        }
                        return;
                    }
                    publish(result);
                }
            });
            GridEngine.getInstance().waitForCompletion(id);


            cmdComputeSilhouette.setText("Compute");
            cmdComputeSilhouette.setEnabled(true);
            return dtm;
        }

        @Override
        protected void process(List<ClusterSetValidationMeasure> chunks) {
            for (ClusterSetValidationMeasure m : chunks) {
                double val = m.showPValue() ? m.getPValue() : m.getMeasure();
                for (int i = 0; i < dtm.getRowCount(); i++) {
                    if (dtm.getValueAt(i, 0).equals(m.getClusterSet())) {
                        dtm.setValueAt(val, i, 1);
                        return;
                    }
                }
                dtm.addRow(new Object[]{m.getClusterSet(), val});
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private samusik.glasscmp.GlassComboBox cmbDistanceMeasure;
    private samusik.glasscmp.GlassButton cmdComputeSilhouette;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
